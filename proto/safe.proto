syntax = "proto3";

package safe;

import "google/protobuf/timestamp.proto";
import "google/protobuf/duration.proto";

service Safe {
  rpc ListIssuers (ListIssuersRequest) returns (IssuerList);

  rpc CreateIssuer (CreateIssuerRequest) returns (CreateIssuerResponse);

  // The client secrets do not directly stem from the issuer's private key, but
  // form a symmetric key that in turn encrypts the private key. This allows us
  // to roll the client secrets.
  rpc RollClientSecrets (RollClientSecretsRequest) returns (RollClientSecretsResponse);

  rpc UpdateCrl (UpdateCrlRequest) returns (UpdateCrlResponse);

  rpc SignCertificate (SignCertificateRequest) returns (SignCertificateResponse);

  rpc RevokeCertificate (RevokeCertificateRequest) returns (RevokeCertificateResponse);

  rpc ListCertificates (ListCertificatesRequest) returns (ListCertificatesResponse);
}

message ListIssuersRequest {}

message IssuerList {
  repeated IssuerInfo issuers = 1;
}

message CreateIssuerRequest {
    string identifier = 1;
    string cert = 2;
    string private_key = 3;
    optional uint32 n_client_secrets = 4;
}

message CreateIssuerResponse {
    string identifier = 1;
    string cert = 2;
    repeated string client_secrets = 3;
}

message IssuerInfo {
  string identifier = 1;
  // PEM-encoded certificate
  string cert = 2;
}

message RollClientSecretsRequest {
  string issuer = 1;
  string secret = 2;
  optional uint32 n_client_secrets = 3;
}

message RollClientSecretsResponse {
  repeated string client_secrets = 1;
}

message UpdateCrlRequest {
  string issuer = 1;
  string secret = 2;
}

message UpdateCrlResponse {}

message SignCertificateRequest {
  string issuer = 1;
  string secret = 2;

  oneof csr {
    // SubjectPublicKeyInfo in PEM format, useful when you do not have a proper
    // CSR but just a public key.
    string spki = 7;
    // DER-encoded X.509 certificate signing request.
    bytes der = 3;
  }

  optional string common_name = 8;

  // Duration with which to offset the not_before time to account for clock skew.
  // Default is -30 seconds, menaing that the certificate's validity period starts
  // 30 seconds _before_ the time of issuance.
  optional google.protobuf.Duration not_before_offset = 4;

  oneof not_after {
    // Standard notAfter time, which is the time at which the certificate expires.
    google.protobuf.Timestamp naf = 5;
    // Time to live for the certificate. Must be positive.
    google.protobuf.Duration ttl = 6;
  }
}

message SignCertificateResponse {
  bytes der = 1;
}

enum RevocationReason {
  UNSPECIFIED = 0;
  KEY_COMPROMISE = 1;
  CA_COMPROMISE = 2;
  AFFILIATION_CHANGED = 3;
  SUPERSEDED = 4;
  CESSATION_OF_OPERATION = 5;
  CERTIFICATE_HOLD = 6;
  REMOVE_FROM_CRL = 8;
  PRIVILEGE_WITHDRAWN = 9;
  AA_COMPROMISE = 10;
}

message RevokeCertificateRequest {
  string issuer = 1;
  string secret = 2;
  string serial = 3;
  optional RevocationReason reason = 4;
  optional google.protobuf.Timestamp invalidity_date = 5;
}

message RevokeCertificateResponse {}

message ListCertificatesRequest {
  string issuer = 1;
}

message ListCertificatesResponse {
  repeated string certificates = 1;
}
