# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from safe.stubs import safe_pb2 as safe_dot_stubs_dot_safe__pb2

GRPC_GENERATED_VERSION = '1.72.1'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in safe/stubs/safe_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class SafeStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ListIssuers = channel.unary_unary(
                '/safe.Safe/ListIssuers',
                request_serializer=safe_dot_stubs_dot_safe__pb2.ListIssuersRequest.SerializeToString,
                response_deserializer=safe_dot_stubs_dot_safe__pb2.IssuerList.FromString,
                _registered_method=True)
        self.CreateIssuer = channel.unary_unary(
                '/safe.Safe/CreateIssuer',
                request_serializer=safe_dot_stubs_dot_safe__pb2.CreateIssuerRequest.SerializeToString,
                response_deserializer=safe_dot_stubs_dot_safe__pb2.CreateIssuerResponse.FromString,
                _registered_method=True)
        self.RollClientSecrets = channel.unary_unary(
                '/safe.Safe/RollClientSecrets',
                request_serializer=safe_dot_stubs_dot_safe__pb2.RollClientSecretsRequest.SerializeToString,
                response_deserializer=safe_dot_stubs_dot_safe__pb2.RollClientSecretsResponse.FromString,
                _registered_method=True)
        self.UpdateCrl = channel.unary_unary(
                '/safe.Safe/UpdateCrl',
                request_serializer=safe_dot_stubs_dot_safe__pb2.UpdateCrlRequest.SerializeToString,
                response_deserializer=safe_dot_stubs_dot_safe__pb2.UpdateCrlResponse.FromString,
                _registered_method=True)
        self.SignCertificate = channel.unary_unary(
                '/safe.Safe/SignCertificate',
                request_serializer=safe_dot_stubs_dot_safe__pb2.SignCertificateRequest.SerializeToString,
                response_deserializer=safe_dot_stubs_dot_safe__pb2.SignCertificateResponse.FromString,
                _registered_method=True)
        self.ListCertificates = channel.unary_unary(
                '/safe.Safe/ListCertificates',
                request_serializer=safe_dot_stubs_dot_safe__pb2.ListCertificatesRequest.SerializeToString,
                response_deserializer=safe_dot_stubs_dot_safe__pb2.ListCertificatesResponse.FromString,
                _registered_method=True)


class SafeServicer(object):
    """Missing associated documentation comment in .proto file."""

    def ListIssuers(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateIssuer(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RollClientSecrets(self, request, context):
        """The client secrets do not directly stem from the issuer's private key, but
        form a symmetric key that in turn encrypts the private key. This allows us
        to roll the client secrets.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateCrl(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SignCertificate(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListCertificates(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_SafeServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ListIssuers': grpc.unary_unary_rpc_method_handler(
                    servicer.ListIssuers,
                    request_deserializer=safe_dot_stubs_dot_safe__pb2.ListIssuersRequest.FromString,
                    response_serializer=safe_dot_stubs_dot_safe__pb2.IssuerList.SerializeToString,
            ),
            'CreateIssuer': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateIssuer,
                    request_deserializer=safe_dot_stubs_dot_safe__pb2.CreateIssuerRequest.FromString,
                    response_serializer=safe_dot_stubs_dot_safe__pb2.CreateIssuerResponse.SerializeToString,
            ),
            'RollClientSecrets': grpc.unary_unary_rpc_method_handler(
                    servicer.RollClientSecrets,
                    request_deserializer=safe_dot_stubs_dot_safe__pb2.RollClientSecretsRequest.FromString,
                    response_serializer=safe_dot_stubs_dot_safe__pb2.RollClientSecretsResponse.SerializeToString,
            ),
            'UpdateCrl': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateCrl,
                    request_deserializer=safe_dot_stubs_dot_safe__pb2.UpdateCrlRequest.FromString,
                    response_serializer=safe_dot_stubs_dot_safe__pb2.UpdateCrlResponse.SerializeToString,
            ),
            'SignCertificate': grpc.unary_unary_rpc_method_handler(
                    servicer.SignCertificate,
                    request_deserializer=safe_dot_stubs_dot_safe__pb2.SignCertificateRequest.FromString,
                    response_serializer=safe_dot_stubs_dot_safe__pb2.SignCertificateResponse.SerializeToString,
            ),
            'ListCertificates': grpc.unary_unary_rpc_method_handler(
                    servicer.ListCertificates,
                    request_deserializer=safe_dot_stubs_dot_safe__pb2.ListCertificatesRequest.FromString,
                    response_serializer=safe_dot_stubs_dot_safe__pb2.ListCertificatesResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'safe.Safe', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('safe.Safe', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class Safe(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def ListIssuers(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/safe.Safe/ListIssuers',
            safe_dot_stubs_dot_safe__pb2.ListIssuersRequest.SerializeToString,
            safe_dot_stubs_dot_safe__pb2.IssuerList.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CreateIssuer(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/safe.Safe/CreateIssuer',
            safe_dot_stubs_dot_safe__pb2.CreateIssuerRequest.SerializeToString,
            safe_dot_stubs_dot_safe__pb2.CreateIssuerResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def RollClientSecrets(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/safe.Safe/RollClientSecrets',
            safe_dot_stubs_dot_safe__pb2.RollClientSecretsRequest.SerializeToString,
            safe_dot_stubs_dot_safe__pb2.RollClientSecretsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UpdateCrl(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/safe.Safe/UpdateCrl',
            safe_dot_stubs_dot_safe__pb2.UpdateCrlRequest.SerializeToString,
            safe_dot_stubs_dot_safe__pb2.UpdateCrlResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SignCertificate(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/safe.Safe/SignCertificate',
            safe_dot_stubs_dot_safe__pb2.SignCertificateRequest.SerializeToString,
            safe_dot_stubs_dot_safe__pb2.SignCertificateResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ListCertificates(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/safe.Safe/ListCertificates',
            safe_dot_stubs_dot_safe__pb2.ListCertificatesRequest.SerializeToString,
            safe_dot_stubs_dot_safe__pb2.ListCertificatesResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
